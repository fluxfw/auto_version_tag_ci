auto_version_tag_ci:
  stage: deploy
  image: composer:1
  script:
    - php -r 'eval(rawurldecode("function getEnvironmentVariable(string %24variable) %3A string { %24value = strval(filter_input(INPUT_ENV, %24variable)); if (empty(%24value)) { echo %22Environment variable %22 . %24variable . %22 not set!\n%22; die(1); } return %24value; } function gitlabRequest(string %24api_url, int %24expect_status_code, bool %24post = false) { %24AUTO_VERSION_TAG_TOKEN = getEnvironmentVariable(%22AUTO_VERSION_TAG_TOKEN%22); %24SERVER_URL = getEnvironmentVariable(%22CI_SERVER_URL%22); %24PROJECT_ID = getEnvironmentVariable(%22CI_PROJECT_ID%22); %24curl = null; %24response = null; %24status_code = null; try { %24request_url = %24SERVER_URL . %22/api/v4/projects/%22 . %24PROJECT_ID . %22/%22 . %24api_url; echo %22Request url%3A %22 . %24request_url . %22\n%22; %24curl = curl_init(%24request_url); curl_setopt(%24curl, CURLOPT_HTTPHEADER, [%22PRIVATE-TOKEN%3A %22 . %24AUTO_VERSION_TAG_TOKEN]); if (%24post) { curl_setopt(%24curl, CURLOPT_POST, true); } curl_setopt(%24curl, CURLOPT_RETURNTRANSFER, true); %24response = curl_exec(%24curl); echo %22Response%3A %22 . %24response . %22\n%22; %24status_code = intval(curl_getinfo(%24curl, CURLINFO_HTTP_CODE)); echo %22Status code%3A %22 . %24status_code . %22\n%22; } finally { if (%24curl !== null) { curl_close(%24curl); } } if (%24status_code !== %24expect_status_code) { echo %22Expect status code%3A %22 . %24expect_status_code . %22\n%22; die(1); } return %24response; } if (php_sapi_name() !== %22cli%22) { die(); } %24COMMIT_ID = getEnvironmentVariable(%22CI_COMMIT_SHA%22); %24composer_json = json_decode(file_get_contents(getcwd() . %22/composer.json%22)); %24version = %24composer_json->version; if (empty(%24version)) { echo %22Version not available in composer.json > version!\n%22; die(1); } %24changelog_md = file_get_contents(getcwd() . %22/CHANGELOG.md%22); %24changelog_header = %22## [%22 . %24version . %22]%22; %24changelog_header_pos = strpos(%24changelog_md, %24changelog_header); if (%24changelog_header_pos === false) { echo %22Changelog for %22 . %24version . %22 not found!\n%22; die(1); } %24changelog = substr(%24changelog_md, %24changelog_header_pos + strlen(%24changelog_header)); %24changelog = substr(%24changelog, 0, strpos(%24changelog, %22\n\n%22)); %24changelog = trim(%24changelog); %24maintainer_user_id = gitlabRequest(%22members%22, 200); if (empty(%24maintainer_user_id) || empty(%24maintainer_user_id = json_decode(%24maintainer_user_id, true)) || !is_array(%24maintainer_user_id)) { echo %22No project members found!\n%22; die(1); } %24maintainer_user_id = array_filter(%24maintainer_user_id, function (array %24member) %3A bool { return (%24member[%22access_level%22] === 40); }); if (empty(%24maintainer_user_id)) { echo %22No project maintainer found!\n%22; die(1); } %24maintainer_user_id = current(%24maintainer_user_id)[%22id%22]; gitlabRequest(%22repository/tags?tag_name=%22 . rawurlencode(%22v%22 . %24version) . %22&ref=%22 . rawurlencode(%24COMMIT_ID) . %22&message=%22 . rawurlencode(%24changelog) . %22&release_description=%22 . rawurlencode(%24changelog), 201, true); gitlabRequest(%22merge_requests?source_branch=%22 . rawurlencode(%22develop%22) . %22&target_branch=%22 . rawurlencode(%22master%22) . %22&title=%22 . rawurlencode(%22WIP%3A Develop%22) . %22&assignee_id=%22 . rawurlencode(%24maintainer_user_id), 201, true);"));'
  only:
    - /^master$/
